<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dicadut.soms.mapper.TaskMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.dicadut.soms.domain.Task">
        <id column="id" property="id"/>
        <result column="task_type" property="taskType"/>
        <result column="task_status" property="taskStatus"/>
        <result column="start_time" property="startTime"/>
        <result column="end_time" property="endTime"/>
        <result column="receive_time" property="receiveTime"/>
        <result column="recall_time" property="recallTime"/>
        <result column="inspector_id" property="inspectorId"/>
        <result column="create_by" property="createBy"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="is_deleted" property="isDeleted"/>
        <result column="version" property="version"/>
    </resultMap>

    <select id="selectCountByTaskStatus" resultType="java.lang.Integer">
        select count(*)
        from soms.task t
        where t.create_time between #{startTime} and #{endTime}
        <if test="taskStatus != null">
            and t.task_status = #{taskStatus}
        </if>
    </select>

    <select id="selectTaskStatisticByTaskStatus" resultType="com.dicadut.soms.dto.TaskStatisticDTO">
        select
            count(*) total_count,
            sum(if(t.task_status = 1002000001,1,0)) wait_4_received_count,
            sum(if(t.task_status = 1002000003,1,0)) wait_4_reviewed_count,
            sum(if(t.task_status = 1002000005,1,0)) wait_4_retransmitted_count,
            sum(if(t.task_status = 1002000002,1,0)) inspecting_count
        from soms.t_task t
        where t.create_time between #{startTime} and #{endTime}
    </select>

    <select id="selectTaskStatisticAppByTaskStatus" resultType="com.dicadut.soms.dto.TaskStatisticAppDTO">
        select
            count(*) total_count,
            sum(if(t.task_status = 1002000006,1,0)) finish_count
        from t_task t
        where t.create_time between #{startTime} and #{endTime}
    </select>


    <select id="selectTaskEndTimeAppList" resultType="com.dicadut.soms.dto.TaskEndTimeAppListDTO">
        select
            t.id,
            t.end_time,
            t.end_time rest_time
        from soms.t_task t
        where t.task_status = #{taskStatus}
        group by t.id
    </select>

    <select id="selectTaskInspectionAppList" resultType="com.dicadut.soms.dto.TaskInspectionAppListDTO">
        select
            t.id,
            tbc.inspection_route
        from soms.t_task_bridge_component tbc
        left join soms.t_task t on tbc.task_id = t.id
        where task_status = #{taskStatus}
        group by t.id
    </select>

    <select id="selectTaskDetailsAppList" resultType="com.dicadut.soms.dto.TaskDetailsAppListDTO">
        select
            a.id,
            group_concat(a.cm) position
        from
            (
                select
                        distinct
                        t.id,
                        b.location ,
                        replace(substring(substring_index(c.xname, '/', 3), char_length(substring_index(c.xname, '/', 3-1)) + 1), '/', '') component_name,
                        concat(b.location, replace(substring(substring_index(c.xname, '/', 3), char_length(substring_index(c.xname, '/', 3-1)) + 1), '/', '')) cm
                from
                        soms.t_task t
                            left join soms.t_task_bridge_component tbc on t.id = tbc.task_id
                            left join soms.t_bridge_component bc on tbc.bridge_component_id = bc.id
                            left join soms.t_bridge b on bc.bridge_id = b.id
                            left join soms.t_component c on bc.component_id = c.id
                where  t.task_status = #{taskStatus}
                    and c.id != c.parent_id
                order by t.id
            ) a
        group by a.id
    </select>

    <select id="selectTaskStatusLatestList" resultType="com.dicadut.soms.dto.TaskDTO">
        select d.code id, d.code_name name, count(t.task_status) value
        from t_dictionary d
        left join soms.task t  on t.task_status = d.`code`  -- TODO task表不存在
        where d.code in ('1002000001','1002000002','1002000003','1002000005')
        group by d.code
    </select>

    <select id="getAmendingTaskListByePageQuery" resultType="com.dicadut.soms.dto.AmendingTaskDTO">
        SELECT DISTINCT
        t.id taskId,
        dd.code_name taskType,
        t.start_time startTime,
        t.end_time endTime,
        CONCAT(b.location,cc.`name`) inspectionPosition,
        u.real_name inspectorName,
        d.code_name taskStatus,
        u1.real_name createBy
        FROM t_task t
        LEFT JOIN t_user u ON t.inspector_id = u.id
        LEFT JOIN t_user u1 ON t.create_by = u1.id
        LEFT JOIN t_task_bridge_component tc ON t.id = tc.task_id
        LEFT JOIN t_bridge_component bc ON tc.bridge_component_id = bc.id
        LEFT JOIN t_component c ON bc.component_id = c.id
        LEFT JOIN t_component cc ON c.parent_id = cc.id
        LEFT JOIN t_bridge b ON b.id=bc.bridge_id
        LEFT JOIN t_dictionary d ON t.task_status = d.`code`
        LEFT JOIN t_dictionary dd ON t.task_type =dd.`code`
        WHERE 1 = 1
        <if test="taskQueryVO.taskStatus != null and taskQueryVO.taskStatus != ''">
            AND t.task_status = #{taskQueryVO.taskStatus}
        </if>
        <if test="taskQueryVO.taskStatus == null or taskQueryVO.taskStatus == ''">
            AND t.task_status in ('1002000004','1002000007','1002000008')
        </if>
        <if test="taskQueryVO.taskType != null and taskQueryVO.taskType != ''">
            AND t.task_type= #{taskQueryVO.taskType}
        </if>
        group by t.id
    </select>

    <select id="selectInspectorList" resultType="com.dicadut.soms.dto.InspectorDTO">
        SELECT DISTINCT u.id,u.real_name `name`, t.id taskId,d.`code_name` taskStatus,t.start_time startTime, t.end_time endTime,CONCAT(b.location,cc.`name`) inspectionPosition
        FROM t_user u
        LEFT JOIN t_task t ON u.id = t.inspector_id
        LEFT JOIN t_task_bridge_component tc ON t.id = tc.task_id
        LEFT JOIN t_bridge_component bc ON tc.bridge_component_id = bc.id
        LEFT JOIN t_bridge b ON b.id=bc.bridge_id
        LEFT JOIN t_component c ON bc.component_id = c.id
        LEFT JOIN t_component cc ON c.parent_id = cc.id
        LEFT JOIN t_dictionary d ON t.task_status = d.`code`
        WHERE u.`duty` = '2'
    </select>

    <select id="getInspectionPosition" resultType="java.lang.String">
        SELECT DISTINCT CONCAT(b.location,cc.`name`) inspectionPosition
        FROM t_task_bridge_component tc
        LEFT JOIN t_bridge_component bc ON tc.bridge_component_id = bc.id
        LEFT JOIN t_component c ON bc.component_id= c.id
        LEFT JOIN t_component cc ON c.parent_id=cc.id
        LEFT JOIN t_bridge b ON bc.bridge_id=b.id
        WHERE tc.task_id=#{taskId}
    </select>

    <select id="getComponentList" resultType="java.lang.String">
        SELECT DISTINCT bc.component_id
        FROM t_task_bridge_component tc
        LEFT JOIN t_bridge_component bc ON tc.bridge_component_id = bc.id
        WHERE tc.task_id=#{taskId}
    </select>

    <select id="getComponentNumberRange" resultType="com.dicadut.soms.dto.ComponentNumberTotalDTO">
        <foreach collection="list" item="item" index="index" separator="UNION">
            SELECT  IF(bc.component_id IN(2001000013,2001000014),GROUP_CONCAT(`stake_or_truss_number` SEPARATOR',' ),
                CONCAT_WS("~",CONCAT(SUBSTR(stake_or_truss_number,1,1),MIN(SUBSTR(stake_or_truss_number,2,3))),
                CONCAT(SUBSTR(stake_or_truss_number,1,1),MAX(SUBSTR(stake_or_truss_number,2,3)+0)))) componentName,
                c.`name` componentNumber
            FROM t_task_bridge_component tc
            LEFT JOIN t_bridge_component bc ON tc.bridge_component_id = bc.id
            LEFT JOIN t_component c ON bc.component_id= c.id
            LEFT JOIN t_bridge b ON bc.bridge_id=b.id
            WHERE tc.task_id=#{taskId} AND bc.component_id=#{item}
        </foreach>
    </select>

    <insert id="addTask" parameterType="com.dicadut.soms.vo.TaskVO">
        INSERT INTO t_task
            (`id`,`task_type`,`task_status`,`start_time`,`end_time`,`receive_time`,`recall_time`,`create_by`)
        values(#{taskId},#{taskVO.taskType},'1002000004',#{taskVO.startTime},#{taskVO.endTime},#{taskVO.receiveTime},
               #{taskVO.recallTime},#{taskVO.createBy})
    </insert>


    <update id="addInspectorToTask" parameterType="com.dicadut.soms.domain.Task">
        update t_task t
        set t.inspector_id =#{userId},t.task_status ='1002000001'
        where t.id=#{taskId}
     </update>

    <select id="selectTaskScanPositionAppList" resultType="com.dicadut.soms.dto.TaskScanPositionAppListDTO">
        SELECT
            bc.scan_position AS id,
            d.code_name AS `name`
        FROM t_task_bridge_component tbc
        LEFT JOIN t_bridge_component bc ON tbc.bridge_component_id = bc.id
        LEFT JOIN t_dictionary d ON bc.scan_position = d.code
        WHERE tbc.task_id = #{taskId}
        GROUP BY bc.scan_position
    </select>

    <select id="getTaskBridgeComponentList" resultType="com.dicadut.soms.dto.TaskBridgeComponentDTO">
        SELECT tbc.task_id,
               t.start_time,
               t.end_time,
               t.recall_time,
               t.receive_time,
               CONCAT(b.location, c.xname, '/', b.stake_or_truss_number) xname,
               CONCAT(b.main_or_approach, b.line, c.xpath, '/', bc.id)   xpath,
               d.code_name                                               taskType,
               d1.code_name                                              taskStatus,
               d2.code_name                                              inspectionFrequency,
               b.location,
               u.real_name                                               inspector,
               u1.real_name                                              creatBy,
               tbc.scan_position,
               c.`name`                                                 componentName,
               b.stake_or_truss_number                                   componentNumber,
               tbc.inspection_route
        FROM t_task_bridge_component tbc
                     LEFT JOIN t_bridge_component bc ON tbc.bridge_component_id = bc.id
                     LEFT JOIN t_component c ON c.id = bc.component_id
                     LEFT JOIN t_bridge b ON b.id = bc.bridge_id
                     LEFT JOIN t_task t ON t.id = tbc.task_id
                     LEFT JOIN t_dictionary d ON d.`code` = t.task_type
                     LEFT JOIN t_dictionary d1 ON d1.`code` = t.task_status
                     LEFT JOIN t_dictionary d2 ON d2.`code` = bc.inspection_frequency
                     LEFT JOIN t_user u ON u.id = t.inspector_id
                     LEFT JOIN t_user u1 ON u1.id = t.create_by
        WHERE tbc.task_id = #{taskId}
    </select>

    <select id="getScanPositionList" resultType="com.dicadut.soms.dto.ScanPositionDTO">
        SELECT DISTINCT d.code_name, d.code
        FROM `t_bridge` b
                     LEFT JOIN t_bridge_component bc ON b.id=bc.bridge_id
                     LEFT JOIN t_dictionary d ON bc.scan_position = d.`code`
        WHERE b.id BETWEEN #{start} AND #{end};
    </select>

    <update id="updateTaskStatus" parameterType="com.dicadut.soms.domain.Task">
        UPDATE soms.t_task t
        SET t.task_status = #{taskStatusIdGo}
        WHERE t.id = #{taskId}
    </update>

    <select id="getPosition" resultType="com.dicadut.soms.dto.TaskBridgeComponentDTO">
        SELECT CONCAT(b.location, c.xname, '/', b.stake_or_truss_number) xname,
               CONCAT(b.main_or_approach, b.line, c.xpath, '/', bc.id)   xpath,
               b.location,
               c.`name`                                                  componentName,
               b.stake_or_truss_number                                   componentNumber
        FROM t_bridge_component bc
                     LEFT JOIN t_component c ON c.id = bc.component_id
                     LEFT JOIN t_bridge b ON b.id = bc.bridge_id
                     LEFT JOIN t_dictionary d2 ON d2.`code` = bc.inspection_frequency
        WHERE bc.bridge_id BETWEEN #{start} AND #{end}
          AND FIND_IN_SET(bc.component_id, #{component})
    </select>

    <select id="getUpdateTaskList" resultType="com.dicadut.soms.dto.TaskBridgeComponentDTO">
        SELECT tbc.task_id,
               t.start_time,
               t.end_time,
               t.recall_time,
               t.receive_time,
               t.create_by,
               t.task_type,
               t.inspector_id                                            inspector,
               bc.inspection_frequency                                   inspectionFrequency,
               tbc.inspection_start,
               tbc.inspection_end,
               bc.component_id,
               CONCAT(b.location, c.xname, '/', b.stake_or_truss_number) xname,
               CONCAT(b.main_or_approach, b.line, c.xpath, '/', bc.id)   xpath,
               d2.code_name                                              y,
               b.location,
               u.real_name                                               inspector,
               tbc.scan_position,
               c.`name`                                                 componentName,
               b.stake_or_truss_number                                   componentNumber,
               tbc.inspection_route
        FROM t_task_bridge_component tbc
                     LEFT JOIN t_bridge_component bc ON tbc.bridge_component_id = bc.id
                     LEFT JOIN t_component c ON c.id = bc.component_id
                     LEFT JOIN t_bridge b ON b.id = bc.bridge_id
                     LEFT JOIN t_task t ON t.id = tbc.task_id
                     LEFT JOIN t_dictionary d ON d.`code` = t.task_type
                     LEFT JOIN t_dictionary d1 ON d1.`code` = t.task_status
                     LEFT JOIN t_dictionary d2 ON d2.`code` = bc.inspection_frequency
                     LEFT JOIN t_user u ON u.id = t.inspector_id
                     LEFT JOIN t_user u1 ON u1.id = t.create_by
        WHERE tbc.task_id = #{taskId}

    </select>
</mapper>
